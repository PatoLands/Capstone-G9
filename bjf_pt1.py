from gurobipy import GRB, Model, quicksum
import csv
import generador_calidad
#import parametros as p

ruta = "q_lt_lluvia_esperada.csv"
q = []
with open(ruta, "r") as archivo:
    lineas = archivo.readlines()
    lineas.pop(0)
    for linea in lineas:
        datos = linea.strip()
        datos = datos.split(";")
        datos.pop(0)
        datos2 = []
        for elem in datos:
            datos2.append(float(elem))
        q.append(datos2)

# param√©tros (ojo que KT,UL, PT las transpuse con respecto a lo que estaba en el pdf)
PL = [0, 18624.444444444445, 46751.333333333336, 29578.333333333332, 14838.125, 20872.222222222223, 13945.0, 40732.875, 37166.722222222226, 16321.11111111111, 7351.902777777777, 49086.666666666664, 38194.444444444445, 53247.41666666666, 37984.43055555555, 8812.5, 47313.166666666664, 52153.29166666666, 22916.666666666668, 24686.36111111111, 18927.5, 35962.24999999999, 25559.333333333332, 18519.86111111111, 34499.666666666664, 16887.5, 41968.66666666666, 17547.5, 23563.416666666668, 19535.166666666664, 6491.625000000001, 18943.13888888889, 50694.458333333336, 31585.5, 10500.0, 31597.222222222223, 39166.666666666664, 34315.11111111111, 12077.819444444445, 15293.666666666666, 14223.624999999998, 41546.75, 29653.08333333333, 11308.388888888889, 21629.416666666668, 48506.20833333333, 44658.055555555555, 15701.666666666664, 31645.166666666668, 41280.555555555555, 35494.0, 39123.333333333336, 32805.00000000001, 12933.250000000002, 19564.972222222223, 47845.555555555555, 33188.833333333336, 16536.777777777777, 12028.500000000002, 45900.833333333336, 36421.555555555555, 28075.791666666664, 20231.666666666668, 10847.347222222224, 34406.583333333336, 29701.38888888889, 7461.055555555557, 31733.43055555555, 16486.749999999996, 17654.166666666668, 9961.291666666666, 29667.083333333332, 22616.777777777777, 26424.666666666664, 12202.222222222223, 18444.444444444445, 26128.166666666668, 32272.48611111111, 29419.0, 36367.583333333336, 26010.0, 35210.99999999999, 31261.597222222223, 50137.833333333336, 18606.88888888889, 12502.38888888889, 22082.083333333332, 45694.444444444445, 21666.666666666668, 22810.694444444445, 6592.055555555555, 40227.805555555555, 39479.0, 36249.22222222222, 32643.875, 18794.958333333332, 29646.944444444445, 49078.583333333336, 38767.666666666664, 11693.166666666666, 31729.625, 13493.041666666668, 34141.13888888889, 38362.569444444445, 31584.583333333332, 9259.930555555555, 27697.25, 33057.305555555555, 17008.5, 16047.166666666664, 49585.958333333336, 27114.527777777777, 24893.0, 36200.791666666664, 30605.972222222223, 23461.59722222222, 11376.486111111111, 37903.055555555555, 49461.55555555555, 14167.416666666668, 18930.555555555555, 26475.291666666668, 8587.555555555555, 27187.416666666668, 7250.458333333333, 12480.819444444447, 16486.805555555555, 17361.11111111111, 21323.250000000004, 10582.777777777777, 12504.63888888889, 12645.652777777777, 40582.166666666664, 16693.527777777777, 13493.041666666668, 33877.77777777778, 39083.333333333336, 41790.0, 46550.08333333334, 26687.791666666668, 12092.666666666666, 43283.833333333336, 46682.66666666666, 8004.638888888888, 14997.111111111111, 16251.666666666666, 36750.0, 16887.416666666668, 18599.01388888889, 25243.11111111111, 33768.59722222222, 12242.388888888889, 26138.777777777774, 18210.777777777777, 33057.305555555555, 30608.583333333336, 12357.916666666666, 37855.0, 32643.875, 10666.666666666666, 13668.930555555553, 14291.666666666666, 32719.98611111111, 8201.916666666666, 33750.0, 8895.930555555557, 12402.777777777777, 27915.875, 28153.916666666664, 23762.222222222223, 26049.152777777777, 11238.888888888889, 52163.61111111111, 20788.375, 12863.888888888889, 36807.666666666664, 7987.291666666667, 8297.666666666666, 25872.055555555555, 12402.777777777777, 46607.0, 7750.0, 34358.88888888889, 36927.77777777778, 18268.38888888889, 49461.55555555555, 38170.458333333336, 28796.11111111111, 13152.569444444445, 16776.583333333332, 50694.444444444445, 35453.666666666664, 13162.777777777777, 33359.916666666664, 31972.027777777774, 37208.333333333336, 35001.11111111111, 31298.666666666668, 35069.444444444445, 17574.194444444445, 30647.68055555556, 13055.555555555555, 29166.666666666668, 27857.25, 9303.444444444445, 29428.819444444445, 24646.5, 42645.666666666664, 17992.625, 24538.79166666667, 44526.166666666664, 45741.458333333336, 22601.33333333333, 34445.25000000001, 38791.666666666664, 32973.61111111111, 16164.083333333336, 37760.583333333336, 7543.333333333333, 35643.333333333336, 16336.138888888889, 45321.25, 30500.0, 52252.55555555555, 28172.833333333332, 6559.875, 39894.333333333336, 7500.0, 47979.166666666664, 15048.777777777777, 17141.291666666664, 31195.555555555555, 26264.291666666668, 24544.51388888889, 23750.0, 15888.75, 25384.36111111111, 6841.958333333333, 18850.333333333332, 23173.61111111111, 9824.555555555555, 26052.027777777777, 17603.666666666668, 49911.944444444445, 14787.458333333334, 24921.20833333333, 47203.333333333336, 34027.77777777778, 34855.333333333336, 45136.65277777778, 30222.222222222223, 11805.555555555555, 12848.625, 11216.111111111111, 13880.166666666666, 49156.125, 11111.111111111111, 41613.0, 9782.486111111111, 6879.805555555556, 22708.333333333332, 34825.0, 40795.0, 19084.625000000004, 28561.94444444444, 39819.444444444445, 50504.666666666664, 56931.88888888889, 25797.055555555555, 31376.25, 8812.5, 9915.013888888889, 30168.152777777777, 22520.833333333332, 33625.291666666664, 34555.333333333336, 31167.555555555555, 22923.208333333332, 16661.18055555556, 42324.33333333333, 40604.583333333336, 11376.486111111111, 46236.666666666664, 15859.63888888889, 37434.666666666664, 36277.99999999999, 24070.75, 10416.666666666666, 18915.416666666668, 33087.527777777774, 29166.666666666668]
TL = [0, 72.5, 172.5, 150.0, 56.25, 81.25, 50.0, 186.25, 147.5, 100.0, 36.25, 185.0, 137.5, 182.5, 166.25, 33.75, 167.5, 178.75, 82.5, 152.5, 75.0, 142.5, 140.0, 87.5, 121.25, 56.25, 147.5, 56.25, 127.5, 95.0, 33.75, 102.5, 173.75, 101.25, 45.0, 113.75, 150.0, 110.0, 61.25, 53.75, 48.75, 157.5, 117.5, 36.25, 122.5, 166.25, 148.75, 75.0, 153.75, 137.5, 180.0, 137.5, 150.0, 82.5, 102.5, 186.25, 161.25, 77.5, 55.0, 162.5, 170.0, 111.25, 76.25, 51.25, 127.5, 113.75, 36.25, 166.25, 78.75, 62.5, 51.25, 162.5, 72.5, 97.5, 47.5, 103.75, 92.5, 141.25, 146.25, 128.75, 101.25, 123.75, 118.75, 177.5, 92.5, 65.0, 87.5, 175.0, 130.0, 106.25, 35.0, 152.5, 138.75, 133.75, 123.75, 71.25, 98.75, 173.75, 136.25, 42.5, 108.75, 63.75, 177.5, 181.25, 162.5, 43.75, 142.5, 122.5, 67.5, 55.0, 183.75, 167.5, 123.75, 186.25, 162.5, 143.75, 53.75, 126.25, 182.5, 52.5, 72.5, 128.75, 40.0, 96.25, 46.25, 46.25, 62.5, 62.5, 97.5, 50.0, 47.5, 66.25, 147.5, 66.25, 63.75, 125.0, 167.5, 157.5, 172.5, 138.75, 42.5, 138.75, 160.0, 42.5, 70.0, 61.25, 183.75, 92.5, 98.75, 130.0, 171.25, 65.0, 122.5, 85.0, 122.5, 111.25, 43.75, 150.0, 123.75, 60.0, 83.75, 61.25, 121.25, 32.5, 168.75, 46.25, 47.5, 146.25, 172.5, 92.5, 98.75, 43.75, 173.75, 71.25, 62.5, 172.5, 43.75, 41.25, 121.25, 47.5, 165.0, 38.75, 133.75, 143.75, 72.5, 182.5, 151.25, 106.25, 81.25, 57.5, 182.5, 176.25, 50.0, 121.25, 167.5, 142.5, 136.25, 110.0, 126.25, 102.5, 178.75, 50.0, 105.0, 101.25, 46.25, 156.25, 135.0, 155.0, 78.75, 126.25, 165.0, 181.25, 120.0, 157.5, 166.25, 125.0, 58.75, 176.25, 37.5, 138.75, 76.25, 162.5, 152.5, 167.5, 165.0, 33.75, 145.0, 37.5, 183.75, 77.5, 58.75, 100.0, 148.75, 143.75, 142.5, 56.25, 121.25, 38.75, 66.25, 88.75, 36.25, 107.5, 82.5, 166.25, 83.75, 98.75, 183.75, 122.5, 122.5, 186.25, 170.0, 42.5, 58.75, 50.0, 55.0, 176.25, 40.0, 146.25, 51.25, 42.5, 136.25, 131.25, 153.75, 78.75, 175.0, 152.5, 177.5, 182.5, 115.0, 112.5, 33.75, 61.25, 148.75, 86.25, 138.75, 127.5, 115.0, 116.25, 68.75, 148.75, 143.75, 53.75, 162.5, 92.5, 120.0, 127.5, 82.5, 62.5, 68.75, 147.5, 105.0]
UL = [[0, 0, 0, 0, 0, 0, 0, 0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]]
AT = 27253/900
BO = [0, 24.0, 25.0, 26.0, 23.0, 22.5, 24.5, 25.0, 26.0]
PFC = 250000/900
PVC = 350000/900
TC = 20
CC = 100
KT = [[0,0,0,0,0],[0, 500.0, 500.0, 200.0, 100.0], [0, 400.0, 300.0, 200.0, 200.0], [0, 350.0, 400.0, 200.0, 150.0]]
PT = [[0, 0,0,0,0],[0, 5000000.0, 4722222.0, 1777778.0, 833389.0], [0, 4133333.0, 3000000.0, 1955556.0, 1933333.0], [0, 3694444.0, 4133333.0, 1888889.0, 1366667.0]]
PT2 = []
for elem in PT:
    k = []
    for elem2 in elem:
        k.append(elem2/10)
    PT2.append(k)
CM = 90
UP = 700
FF = 0.15
# la demanda es por tipo de vino y no por receta.
D = [0, 6123.0, 4443.0, 4599.0, 5324.0, 4380.0, 6193.0, 5256.0, 5740.0, 5913.0, 0, 5387.0, 0, 0, 6132.0, 5037.0, 0, 5475.0, 0]

D_menos1 = [0, 5587.0, 4161.0, 4297.0, 4919.0, 4106.0, 5645.0, 4861.0, 5269.0, 5414.0, 0, 4972.0, 0, 0, 5595.0, 4675.0, 0, 5047.0, 0]
D_menos2 = [0, 5051.0, 3879.0, 3995.0, 4514.0, 3832.0, 5097.0, 4466.0, 4798.0, 4915.0, 0, 4557.0, 0, 0, 5058.0, 4313.0, 0, 4619.0, 0]


D_mas1 = [0, 6659.0, 4725.0, 4901.0, 5729.0, 4654.0, 6741.0, 5651.0, 6211.0, 6412.0, 0, 5802.0, 0, 0, 6669.0, 5399.0, 0, 5903.0, 0]
D_mas2 = [0, 7195.0, 5007.0, 5203.0, 6134.0, 4928.0, 7289.0, 6046.0, 6682.0, 6911.0, 0, 6217.0, 0, 0, 7206.0, 5761.0, 0, 6331.0, 0]



# FR[r,i] donde r es la receta e i es la fracci√≥n del tipo de uva
FR = [[0,0,0,0,0,0,0,0],[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.1, 0.2, 0.0, 0.2, 0.0, 0.4, 0.1, 0.0], [0.0, 0.3, 0.1, 0.1, 0.0, 0.2, 0.2, 0.1], [0.1, 0.1, 0.0, 0.2, 0.2, 0.2, 0.2, 0.0], [0.2, 0.1, 0.1, 0.2, 0.2, 0.2, 0.0, 0.0], [0.2, 0.0, 0.2, 0.0, 0.1, 0.1, 0.2, 0.2], [0.5, 0.0, 0.1, 0.0, 0.1, 0.2, 0.1, 0.0], [0.1, 0.1, 0.1, 0.2, 0.3, 0.2, 0.0, 0.0], [0.2, 0.2, 0.0, 0.0, 0.0, 0.2, 0.3, 0.1], [0.15, 0.15, 0.15, 0.15, 0.1, 0.1, 0.1, 0.1], [0.12, 0.15, 0.08, 0.1, 0.1, 0.25, 0.15, 0.05]]

PB = 1.983


# PR es precio de venta botella de receta tipo r en d√≥lares.
PR = [0, 2.796, 2.029, 2.1, 2.431, 2.0, 2.828, 2.4, 2.621, 2.7, 2.7, 2.46, 2.46, 2.46, 2.8, 2.3, 2.3, 2.5, 2.5]

#precios menos o mas distribucion
PR_menos1 = [0, 2.706, 1.8039999999999998, 1.83, 2.251, 1.8, 2.6929999999999996, 2.2649999999999997, 2.4859999999999998, 2.52,2.52, 2.26,2.26,2.26, 2.57, 1.9999999999999998,1.9999999999999998, 2.23,2.23]
PR_menos2 = [0, 2.6159999999999997, 1.579, 1.56, 2.071, 1.6, 2.558, 2.13, 2.351, 2.3400000000000003, 2.06, 2.34, 1.6999999999999997, 1.96]


PR_mas1 = [0, 2.8859999999999997, 2.254, 2.37, 2.611, 2.2, 2.963, 2.535, 2.7560000000000002, 2.8800000000000003,2.8800000000000003, 2.66, 2.66, 2.66, 3.03, 2.5999999999999996,2.5999999999999996, 2.77, 2.77]
PR_mas2 = [0, 2.976, 2.479, 2.64, 2.791, 2.4, 3.098, 2.67, 2.891, 3.06, 2.86, 3.26, 2.9, 3.04]


PLo = [0, 0.85, 1, 0.92, 1] #cambie el par√°metro de PL^o para que fuera uno suelto y se multiplicara en la FO.


#Parametros para penalizar (COMENTAR PARA CORRER MODELO NORMAL)
#CM = 90
#UP = 0
#FF = 0.1





# conjuntos
TU = [1, 2, 3, 4, 5, 6, 7, 8]  # tipos de uva      (i)
L = list(range(1, 291))        # lotes             (l)
T = list(range(1, 162))        # d√≠as o periodos   (t)
P = [1, 2, 3]                  # plantas           (p)
J = list(range(1, 53))         # t√°nques           (j)
K = [1, 2, 3, 4]               # tramos            (k)
R = list(range(1, 19))         # recetas / blends  (r) #son 18 recetas

#q = # simular
#q_2 = # este es q', tambien simular.

# modelo
m = Model("ETC")

# variables
v     = {}
x     = {}
c     = {}
z     = {}
I     = {}
alpha = {}
beta  = {}
gamma = {}
f = {}
wC = {}
wE = {}
y = {}
a = {}
h = {}
#u = {}

for t in T:
    for i in TU:
        f[i,t]=m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="f_{}_{}".format(i,t))
        wC[i,t]=m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="wC_{}_{}".format(i,t))
        for p in P:
            x[i,p,t]= m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="x_{}_{}_{}".format(i,p,t))
            c[i,p,t]= m.addVar(vtype=GRB.INTEGER, lb=0.0, name="c_{}_{}_{}".format(i,p,t))
            for j in J:
                z[i,p,t,j]= m.addVar(vtype=GRB.BINARY, lb=0.0, name="z_{}_{}_{}_{}".format(i,p,t,j))
                y[i,p,t,j]= m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="y_{}_{}_{}_{}".format(i,p,t,j))
                #u[i,p,t,j]= m.addVar(vtype=GRB.BINARY, lb=0.0, name="u{}{}{}{}".format(i,p,t,j))
                I[i,p,t,j]= m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="I_{}_{}_{}_{}".format(i,p,t,j))
                wE[i, p, t, j] = m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="wE_{}_{}_{}_{}".format(i, p, t, j))
                for r in R:
                    beta[i,p,t,r,j]= m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="beta_{}_{}_{}_{}_{}".format(i,p,t,r,j))
    for l in L:
        v[l,t]= m.addVar(vtype=GRB.BINARY, lb=0.0, name="v_{}_{}".format(l,t))
        a[l,t]= m.addVar(vtype=GRB.BINARY, lb=0.0, name="a_{}_{}".format(l,t))

for p in P:
    for t in T:
        for r in R:
            gamma[r,p,t]= m.addVar(vtype=GRB.CONTINUOUS, lb=0.0, name="gamma_{}_{}_{}".format(r,p,t))
    for k in K:
        alpha[k,p]= m.addVar(vtype=GRB.BINARY, lb=0.0, name="alpha_{}_{}".format(k,p))

for w in range(1, 22):
    h[w]=m.addVar(vtype=GRB.INTEGER, lb=0.0, name="h_{}".format(w))
m.update()

# ###############################################################################
# limite_superior = 70
# ###############################################################################
# 
# with open('Solucion_E2_95.sol', newline='\n') as csvfile:
#     reader = csv.reader((line.replace('  ', ' ') for line in csvfile), delimiter=' ')
#     next(reader)  # skip header
#     sol = {}
#     variables = 0
#     for var, value in reader:
#         variables += 1
#         #if float(value) != 0:
#         sol[var] = float(value)
#     #print(len(sol))
# 
# #with open("solution.csv", "a") as archivo:
# #    for key in sol:
# #        linea = str(key) + ";" + str(sol[key]) + "\n"
# #        archivo.write(linea)
# 
# 
# def extract_variable(var):
#     for i in range(len(var)):
#         if var[i] == "_":
#             return var[:i]
# 
# def t_en_2(var, key, sol, limite_superior, m):
#     var_como_lista = list(map(int,key.split('_')[1:]))
#     if var_como_lista[1] <= limite_superior:
#         m.addConstr(var[var_como_lista[0],var_como_lista[1]] == sol[key])
# 
# for key in sol:
#     key2 = extract_variable(key)
#     #caso t en 2
#     if key2 == "v" or key2 == "a" or key2 == "f" or key2 == "wC":
#         if key2 == "v": t_en_2(v, key, sol, limite_superior, m)
#         elif key2 == "a": t_en_2(a, key, sol, limite_superior, m)
#         elif key2 == "f": t_en_2(f, key, sol, limite_superior, m)
#         elif key2 == "wC": t_en_2(wC, key, sol, limite_superior, m)
#     elif key2 == "x" or key2 == "c" or key2 == "z" or key2 == "y" or key2 == "u" or key2 == "I" or key2 == "wE" or key2 == "beta" or key2 == "gamma":
#         var_como_lista = list(map(int,key.split('_')[1:]))
#         if var_como_lista[2] <= limite_superior:
#             if key2 == "x": m.addConstr(x[var_como_lista[0],var_como_lista[1],var_como_lista[2]] == sol[key])
#             elif key2 == "c": m.addConstr(c[var_como_lista[0],var_como_lista[1],var_como_lista[2]] == sol[key])
#             elif key2 == "gamma": m.addConstr(gamma[var_como_lista[0],var_como_lista[1],var_como_lista[2]] == sol[key])
#             elif key2 == "z": m.addConstr(z[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3]] == sol[key])
#             elif key2 == "y": m.addConstr(y[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3]] == sol[key])
#             #elif key2 == "u": m.addConstr(u[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3]] == sol[key])
#             elif key2 == "I": m.addConstr(I[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3]] == sol[key])
#             elif key2 == "wE": m.addConstr(wE[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3]] == sol[key])
#             elif key2 == "beta": m.addConstr(beta[var_como_lista[0],var_como_lista[1],var_como_lista[2],var_como_lista[3],var_como_lista[4]] == sol[key])
#     elif key2 == "alpha":
#         var_como_lista = list(map(int,key.split('_')[1:]))
#         m.addConstr(alpha[var_como_lista[0],var_como_lista[1]] >= sol[key])
#   
# m.update()


#restricciones
#1 Relaci√≥n cosecha y desecho
for t in T:
         for i in TU:
            m.addConstr(quicksum((v[l, t]*TL[l]*UL[l][i-1])-wC[i, t] for l in L) == f[i, t])
            #m.addConstr(quicksum((v[l, t]*TL[l]*UL[l][i-1]) for l in L) == f[i, t])

# 1¬¥¬¥
for w in range(1,22):
    m.addConstr(quicksum(c[i,p,t] for i in TU for p in P for t in range(7*w,7*w+7)) - CC <= h[w])
    m.addConstr(h[w]<=100)
for i in TU:
    for p in P:
        for t in range(1,64):
            m.addConstr(c[i,p,t]==0)
#2 Definici√≥n de variable vlto y slto
for l in L:
    m.addConstr(quicksum(v[l,t]for t in T) <= 1)

#3
for l in L:
    m.addConstr(quicksum(a[l,t] for t in T) == quicksum(v[l,t] for t in T))
    for t in range(1,155):
        m.addConstr(a[l,t] <= quicksum(v[l,e] for e in range(t+3,t+6)))
    for t in range(154, 162):
        m.addConstr(a[l,t] == 0)
    

#4 Capacidad camiones
for i in TU:
    for t in T:
        m.addConstr(f[i,t] == quicksum(x[i,p,t] for p in P))
        for p in P:
            m.addConstr(x[i,p,t] <= 20*c[i,p,t])

#5 uso de tanque de vinificaci√≥n
for i in TU:
    for p in P:
        for t in T:
            if t>1:
                m.addConstr(0.73*x[i,p,t-1] == quicksum(y[i,p,t,j] for j in J))


#6 uso de tanque de vinificacion II
for i in TU:
    for p in P:
        for t in T:
            if t>0:
                for j in J:
                    m.addConstr(y[i,p,t,j] <= 25* z[i,p,t,j])
                    m.addConstr(12.5*z[i,p,t,j] <= y[i,p,t,j])


#7 limitaciones de tanques por planta

for t in T:
    for j in range(45,53):
        for p in range(2,4):
            for i in TU:
                m.addConstr(z[i,p,t,j] == 0)
    if t>0:
        for j in J:
            for p in P:
                m.addConstr(quicksum(z[i,p,t,j]for i in TU) <= 1 )
                if t<152:
                    m.addConstr(quicksum(z[i,p,e,j] for i in TU for e in range(t + 1, t + 9)) <= (1 - quicksum(z[i,p,t,j] for i in TU)))



#8 M√°ximo uso de tanques

for t in T:
    for p in P:
        if t<152:
            m.addConstr(25 * quicksum(z[i,p,e,j] for i in TU for j in J for e in range(t, t+9)) <= quicksum(alpha[k,p] * KT[p][k] for k in K))
for k in [1,2,3]:
    for p in P:
        m.addConstr(alpha[k+1,p] <= alpha[k,p])

# 9 Inventario de tanques intermedios
for i in TU:
    for p in P:
        for j in J:
            for t in T:
                if t <= 8:
                    m.addConstr(I[i, p, t, j] == 0)
                    m.addConstr(y[i, p, t, j] == 0)
                elif t>14:
                    m.addConstr(I[i, p, t, j] <= 25 * (1 - z[i, p, t - 14, j]))

for i in TU:
    for j in J:
        for p in P:
            for t in T:
                if 1 < t <= 8:
                    m.addConstr(I[i, p, t - 1, j]  == quicksum(beta[i, p, t, r,j] for r in R) + wE[i, p, t,j] + I[i, p, t, j] )
                if t > 8:
                    m.addConstr(y[i, p, t - 8, j] + I[i, p, t - 1, j]  == quicksum(beta[i, p, t, r,j] for r in R) + wE[i, p, t,j] + I[i, p, t, j] )
                elif t <= 8:
                    for r in R:
                        m.addConstr(beta[i, p, t, r,j] == 0)

# 10 Capacidad de embotellado

for t in T:
    for p in P:
        m.addConstr(quicksum(beta[i, p, t, r,j] for r in R for i in TU for j in J) <= quicksum(alpha[k,p] * KT[p][k] for k in K) / (9 * 0.6))


# 11 Cota de producci√≥n seg√∫n receta
for i in TU:
    for t in T:
        for p in P:
            for r in R:
                m.addConstr(gamma[r,p,t] * FR[r][i-1] <= quicksum(beta[i,p,t,r,j] for j in J))
for t in T:
    for p in P:
        for r in R:
            if t<=8:   
                m.addConstr(gamma[r,p,t] == 0)
                for i in TU:
                    for j in J:
                        m.addConstr(beta[i,p,t,r,j] == 0)

# 12 Cota superior de demanda #en que unidad esta la demanda?
## recetas √∫nicas
for r in [1, 2, 3, 4, 5, 6, 7, 8, 14]:
    m.addConstr( quicksum(gamma[r,p,t] for t in T for p in P) <= D[r] * 0.75)

##recetas multiples

m.addConstr(quicksum(gamma[r,p,t] for r in [11, 12, 13] for t in T for p in P) <= quicksum(D[r] * 0.75 for r in [11, 12, 13]))
m.addConstr(quicksum(gamma[r,p,t] for r in [15, 16] for t in T for p in P) <= quicksum(D[r] * 0.75 for r in [15, 16]))
m.addConstr(quicksum(gamma[r,p,t] for r in [17, 18] for t in T for p in P) <= quicksum(D[r] * 0.75 for r in [17, 18]))
m.addConstr(quicksum(gamma[r,p,t] for r in [9, 10] for t in T for p in P) <= quicksum(D[r] * 0.75 for r in [9, 10]))

##13 Limitacion capacidad plantas
#for i in TU:
#    for p in P:
#        for j in J:
#            for t in T:
#                m.addConstr(y[i, p, t, j] <= 25 * (CM/100)*u[i, p, t, j] )
#funcion objetivo de maximizaci√≥n
obj1 = (-1) * quicksum(v[l,t]*((PL[l])+(AT*TL[l]*(1-q[l-1][t-1])*quicksum(BO[i]*UL[l][i-1] for i in TU))) for t in T for l in L)
obj2 = (-1) * quicksum(PFC * CC + PVC * h[w] for w in range(8,21))
obj3 = (-1) * quicksum(alpha[k,p]*PT2[p][k] for p in P for k in K)
obj4 = quicksum(((1333.333333*gamma[r,p,t]))*(PR[r]-PB) for r in R for t in T for p in P)
#obj5 = -quicksum((u[i,p,t,j]*FF*UP) for i in TU for t in T for p in P for j in J)
obj = obj1 + obj2 + obj3 + obj4 

m.setObjective(obj,GRB.MAXIMIZE)

#resultados
m.write("Modelo {}.lp".format(m.ModelName))  # crear un lp con el nombre definido del modelo
m.write("Modelo pt1.lp")  # crear un lp con un nombre predeterminado
m.Params.MIPGap = 0.3
m.optimize()

# Escribir la solucion
m.write("Solucion {}.mst".format(m.ModelName))
m.write("Solucion_pt1.mst")
m.write("Solucion_pt1.sol")
#m.printAttr("x")
